<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shawkaine&#39;s 小炉</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-26T10:28:48.482Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>R语言静态网页爬虫（rvest, stringr, DOM)</title>
    <link href="http://yoursite.com/2017/12/20//r-crawler-start/"/>
    <id>http://yoursite.com/2017/12/20//r-crawler-start/</id>
    <published>2017-12-20T10:09:00.000Z</published>
    <updated>2018-01-26T10:28:48.482Z</updated>
    
    <content type="html"><![CDATA[<p>最近受友之托，帮忙抓取国内铝合金的价格，正好在学习R语言，便答应了来练手。</p><p>初始网址是 <a href="http://ometal.com/bin0/new/searchkey.asp?type=%C2%C1%BA%CF%BD%F0ADC12%BC%DB%B8%F1%D0%D0%C7%E9" target="_blank" rel="noopener">铝合金ADC12价格行情</a>，集合了每日价格的搜索列表，每页60条，</p><p><img src="https://pic3.zhimg.com/v2-b2e46eab1522e617f3b92d710c44ee14_b.jpg" alt=""></p><p>下一页同样，直到最后一页，大概一整年的数据。查看一下源代码，链接就在<a>标签里，可以直接获取，包括下一页，于是开干。</a></p><blockquote><p>参考教程 <a href="http://www.ituring.com.cn/article/465317" target="_blank" rel="noopener">【译文】R语言网络爬虫初学者指南（使用rvest包）</a></p></blockquote><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><ol><li>根据教程，在Chrome安装Selector Gadget插件，根据CSS选择器、XPath快速定位想要爬取的标签</li><li>如果1不够精确或出现问题，使用正则表达式直接匹配文本</li><li>整理每日价格和日期为data.frame，写入excel<h2 id="预热准备"><a href="#预热准备" class="headerlink" title="预热准备"></a>预热准备</h2></li></ol><ul><li>R语言的安装，基本语法</li><li>所需R包</li><li><p>rvest 处理网页爬虫，<a href="http://blog.csdn.net/sadfasdgaaaasdfa/article/details/45372307" target="_blank" rel="noopener">简介</a></p></li><li><p>stringr 处理字符串：拼接、计算、匹配，<a href="https://www.cnblogs.com/nxld/p/6062950.html" target="_blank" rel="noopener">简介</a></p></li><li>其他要求：web开发的基本知识，基本编程知识</li></ul><h2 id="根据CSS选择器和XPath-定位相应节点"><a href="#根据CSS选择器和XPath-定位相应节点" class="headerlink" title="根据CSS选择器和XPath 定位相应节点"></a>根据CSS选择器和XPath 定位相应节点</h2><p>在Chrome浏览器里打开网页，右键空白处，查看网页源代码，就能看到一连串并列、嵌套的HTML标签（关于CSS，JavaScript部分请<a href="http://www.runoob.com/" target="_blank" rel="noopener">进一步学习前端开发</a>）。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=gb2312"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>铝合金ADC12价格行情-全球金属网OMETAL.COM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/css/news.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">"0"</span> <span class="attr">topmargin</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"colorbar"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>通俗地说，这些标签的关系可以由一个树状结构来表示，而每个标签在树中的位置或者说路径可以由<a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">CSS选择器</a> 或 <a href="http://www.w3school.com.cn/xpath/index.asp" target="_blank" rel="noopener">XPath</a> 来表示，利用<a href="http://selectorgadget.com/" target="_blank" rel="noopener">Selector Gadget</a>插件，我们可以快速定位想要获取的内容。更精准的定义请查看<a href="http://www.runoob.com/htmldom/htmldom-intro.html" target="_blank" rel="noopener">HTML DOM 简介</a></p><p><img src="https://pic3.zhimg.com/v2-6c8684013bfec0d12f51c32f4f5d71d7_b.jpg" alt=""></p><p>插件高亮了所有class=”s105” 的元素，进一步查看源码</p><p><img src="./_image/2018-01-26 17-46-54.jpg" alt=""><br>链接在 td标签的子元素a标签中，根据CSS选择器描述，<code>.s105 a</code> 更为精准</p><p><img src="./_image/2018-01-26 17-47-41.jpg" alt=""><br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">library('rvest')</span><br><span class="line"># 获取每日价格链接</span><br><span class="line">page &lt;- url('http://ometal.com/bin<span class="number">0</span>/new/searchkey.asp?<span class="keyword">type</span>=<span class="symbol">%C2</span><span class="symbol">%C1</span><span class="symbol">%BA</span><span class="symbol">%CF</span><span class="symbol">%BD</span><span class="symbol">%F0ADC12</span><span class="symbol">%BC</span><span class="symbol">%DB</span><span class="symbol">%B8</span><span class="symbol">%F1</span><span class="symbol">%D0</span><span class="symbol">%D0</span><span class="symbol">%C7</span><span class="symbol">%E9</span>','rb')</span><br><span class="line">webpage &lt;- read_html(page)</span><br><span class="line">daily_link &lt;- html_nodes(webpage,'.s<span class="number">105</span> a')</span><br><span class="line">daily_link &lt;- html_attr(daily_link,<span class="string">"href"</span>)</span><br></pre></td></tr></table></figure></p><h2 id="正则表达式精准提取"><a href="#正则表达式精准提取" class="headerlink" title="正则表达式精准提取"></a>正则表达式精准提取</h2><p>打开某一日价格行情，用同样的办法定位想要的价格</p><p><img src="./_image/2018-01-26 17-48-17.jpg" alt=""><br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 生成每日完整链接</span><br><span class="line">link &lt;- paste(<span class="string">"http://ometal.com"</span>,link_data,sep = <span class="string">""</span>)</span><br><span class="line"># 获取每日价格总表</span><br><span class="line">page &lt;- url(link,<span class="string">'rb'</span>)</span><br><span class="line">webpage &lt;- read_html(page)</span><br><span class="line">page_text &lt;- html_nodes(webpage,xpath = <span class="string">'//p/text()'</span>)</span><br></pre></td></tr></table></figure></p><p><img src="./_image/2018-01-26 17-48-58.jpg" alt=""></p><p>这次数据中的杂质更多，用正则表达式来进一步提取<br>观察价格数据的特征，由一系列数字组成，参考价中间由-隔开，涨跌由/隔开，涨跌数字前面有+/-来表示涨跌，所以正则匹配规则为<br><code>raw_text &lt;- str_extract_all(page_text,&quot;.?[0-9]+[-/].?[0-9]+&quot;)</code><br>其中<br><code>.</code>为任意字符<br><code>?</code>为前面字符出现0或1次<br><code>[]</code>内的任意字符将被匹配，<code>[0-9]</code>任意数字<br><code>+</code>前面字符出现1或多次<br>整个表达式可“翻译”为</p><blockquote><p>寻找这样一个字符串：在某个任意字符后面，出现2组数字，2组数字中间间隔1到2个字符，第一个字符为-或/</p></blockquote><p>此时得到的数据如下</p><p><img src="./_image/2018-01-26 17-52-36.jpg" alt=""><br>不相关的文字都变成了<code>character(0)</code>，已经接近我们想要的效果，但还不够。</p><h2 id="利用R强大的索引特性取子集"><a href="#利用R强大的索引特性取子集" class="headerlink" title="利用R强大的索引特性取子集"></a>利用R强大的索引特性取子集</h2><p>关于怎么去掉character(0)，我也是思索了 许久，参考stackoverflow上的几篇回答，终于得出最佳方案<a href="https://stackoverflow.com/questions/44766349/how-to-convert-character0-to-na-in-a-list-with-r-language" target="_blank" rel="noopener">How to convert character(0) to NA in a list with R language?</a> 根据这一篇，可以先将character(0)转换为NA，然后利用 is.na函数取子集但是既然可以用现成的函数取子集，为什么不能利用apply函数自定义直接判断character(0)然后取子集呢？<a href="https://stackoverflow.com/questions/36714218/keep-list-index-number-unchanged-after-removing-null-and-character0-in-r" target="_blank" rel="noopener">Keep list index number unchanged after removing NULL and character[0] in R</a></p><p><img src="./_image/2018-01-26 17-57-32.jpg" alt=""><br>这个答案中的方法给了我启发，也给了我误导，不如自己摸索</p><p><img src="./_image/2018-01-26 17-57-47.jpg" alt=""><br>漂亮！接下来就是循环获取所有价格，以及输出到excel文件了。</p><h2 id="磕碰"><a href="#磕碰" class="headerlink" title="磕碰"></a>磕碰</h2><ul><li>rvest包对部分CSS选择器语法不支持，具体查看<a href="https://cran.r-project.org/web/packages/rvest/rvest.pdf" target="_blank" rel="noopener">官方文档</a></li></ul><p><img src="./_image/2018-01-26 17-58-16.jpg" alt=""><br>竟然是通过selectr包从XPath转译过来的，那还是直接用XPath吧……而且仔细看selectr包的介绍，竟然是从Python包移植过来的（请允悲）</p><p><img src="./_image/2018-01-26 17-58-41.jpg" alt=""></p><ul><li>在抓取下一页的时候，出现了已定位到a的父元素，却无法提取链接的情况，仔细看源码，因为是首页，上一页没有链接，但&lt;&lt;&lt;显然阻断了XPath的解析</li></ul><p><img src="./_image/2018-01-26 18-01-05.jpg" alt=""><br>改变策略，通过读取html文本，进行全文正则匹配，读取原文就一定要注意编码方式，否则正则无法正确匹配。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">totalPage &lt;- readLines(total)</span><br><span class="line">totalPage &lt;- iconv(totalPage,from = <span class="string">"GB2312"</span>,to = <span class="string">"UTF-8"</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="selector-tag">i</span> <span class="keyword">in</span> length(totalPage):<span class="number">1</span>) &#123;</span><br><span class="line">rule2 &lt;- regexpr(<span class="string">".*next&amp;page.*下一页"</span>,totalPage[i])</span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(rule2[<span class="number">1</span>]!=-<span class="number">1</span>)</span></span> &#123;</span><br><span class="line">rule3&lt;-regexpr(<span class="string">"/bin0.*next&amp;page=[0-9]+"</span>,totalPage[i])</span><br><span class="line">nextLink&lt;- regmatches(totalPage[i],rule3)</span><br><span class="line"><span class="function"><span class="title">break</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>R的很多报错非常非人类，比如打错变量名会告诉你长度不一致（黑人问号？！）……幸而找到一篇<a href="https://www.r-bloggers.com/translating-weird-r-errors/" target="_blank" rel="noopener">不错的总结文</a></li><li>初期在安装rvest包时，提醒需要rJava包，结果这个安装也是颇为曲折，大约遇到了5,6个问题</li></ul><p><img src="./_image/2018-01-26 18-02-02.jpg" alt=""></p><p>顺便加深了对环境变量的理解…… <a href="http://www.micmiu.com/lang/java/set-javahome-on-mac-os-x/" target="_blank" rel="noopener">$JAVA_HOME环境变量在Mac OS X中设置的问题</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最大的问题还是对R语言的不熟悉，现查现用，以及中文资源较少（其实也不少，但是遇到个例化的问题就很难直接搜到结果，通常只有去外网或Stack Overflow（上面的第二个链接浏览次数才75次……），而且一定要找准关键词。另外一个感受是R并不是一门普适性编程语言，有其牛逼之处（向量运算！），也有很多憋屈的时候，以后再用python做爬虫比较看看（flag……）最后，《R语言实战》真是一本好书！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近受友之托，帮忙抓取国内铝合金的价格，正好在学习R语言，便答应了来练手。&lt;/p&gt;
&lt;p&gt;初始网址是 &lt;a href=&quot;http://ometal.com/bin0/new/searchkey.asp?type=%C2%C1%BA%CF%BD%F0ADC12%BC%DB%B
      
    
    </summary>
    
    
      <category term="R 爬虫 HTML 正则" scheme="http://yoursite.com/tags/R-%E7%88%AC%E8%99%AB-HTML-%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Shell 比较并合并两个相似文件</title>
    <link href="http://yoursite.com/2017/01/29/shell-file-compare/"/>
    <id>http://yoursite.com/2017/01/29/shell-file-compare/</id>
    <published>2017-01-28T16:00:00.000Z</published>
    <updated>2018-01-26T08:12:14.094Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为网易云笔记同步出错，出现了两份相似的笔记，因为内容比较杂，人工比对费时而且容易出错，于是想用Shell来合并两个文件，结果相当于两个集合求和再去重。</p><p>涉及命令 <code>sort, grep, sed, cat</code></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>我的文本具有一定的特殊性，可以排序，何乐而不为~ </p><p><code>LC_ALL=C sort -f file&gt;newfile</code></p><p><code>LC_ALL=C</code> 是设置语言环境为默认，强制<code>sort</code>命令以字节为单位来排序，没有的话可能会报错<br><a id="more"></a><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>: <span class="keyword">string</span> comparison failed: Illegal <span class="keyword">byte</span> sequence</span><br><span class="line"><span class="built_in">sort</span>: Set LC_ALL=<span class="string">'C'</span> <span class="built_in">to</span> work around <span class="keyword">the</span> problem.</span><br></pre></td></tr></table></figure></p><p><code>-f</code>是排序时将小写视为大写，这样A，a就会排在一起，否则会先排大写，后排小写</p><blockquote><p>参考：<a href="http://blog.chinaunix.net/xmlrpc.php?r=blog/article&amp;uid=29312110&amp;id=4480485" target="_blank" rel="noopener">LC_ALL=C的含义</a><br>这篇英文问答讲解得非常详细 <a href="http://unix.stackexchange.com/questions/87745/what-does-lc-all-c-do" target="_blank" rel="noopener">What does “LC_ALL=C” do?</a></p></blockquote><h3 id="去空行"><a href="#去空行" class="headerlink" title="去空行"></a>去空行</h3><p>使用grep比较时，空行会影响比较结果，所以先去空行</p><p><code>cat file | sed -e &#39;/^$/d&#39; &gt; file</code></p><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p><code>grep -vFf file1 file2</code> 统计file1中没有，file2中有的行 (注意空行会影响比较结果）</p><p>比较方式有很多种，除了grep，还有comm, awk等等</p><blockquote><p>参考：<a href="http://man.linuxde.net/grep" target="_blank" rel="noopener">grep命令</a><br><a href="http://blog.csdn.net/tianmohust/article/details/6997924" target="_blank" rel="noopener">两个文件的共同部分或者差异部分     </a> </p></blockquote><h3 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h3><p>最后就是合并了，我用了个简单粗暴的办法，将比较结果直接粘贴到file1，然后再对file1进行一次排序。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep -vFf file1 file2 <span class="meta">&gt;&gt;</span>file1</span><br><span class="line">LC_ALL=C sort -f file1&gt;newfile</span><br></pre></td></tr></table></figure></p><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><ol><li>排序结果中文部分是乱序，需要再研究。</li><li>整个流程都比较简单粗暴，没有考虑性能问题（我水平有限，见过的有明显性能问题的文本处理不多），下次可以试试排序后逐行对比并插入的实现，然后测一测性能。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Shell的各种命令工具都非常强大，这只是蜻蜓点水式的尝试，以后会多多实践探究！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近因为网易云笔记同步出错，出现了两份相似的笔记，因为内容比较杂，人工比对费时而且容易出错，于是想用Shell来合并两个文件，结果相当于两个集合求和再去重。&lt;/p&gt;
&lt;p&gt;涉及命令 &lt;code&gt;sort, grep, sed, cat&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h3&gt;&lt;p&gt;我的文本具有一定的特殊性，可以排序，何乐而不为~ &lt;/p&gt;
&lt;p&gt;&lt;code&gt;LC_ALL=C sort -f file&amp;gt;newfile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LC_ALL=C&lt;/code&gt; 是设置语言环境为默认，强制&lt;code&gt;sort&lt;/code&gt;命令以字节为单位来排序，没有的话可能会报错&lt;br&gt;
    
    </summary>
    
    
      <category term="shell macOS" scheme="http://yoursite.com/tags/shell-macOS/"/>
    
  </entry>
  
  <entry>
    <title>《夜航》的读书笔记</title>
    <link href="http://yoursite.com/2016/07/23/night-flight-note/"/>
    <id>http://yoursite.com/2016/07/23/night-flight-note/</id>
    <published>2016-07-22T16:00:00.000Z</published>
    <updated>2018-01-26T08:10:36.793Z</updated>
    
    <content type="html"><![CDATA[<p>一早就读过，最近在多看导出的印象笔记中翻到，感慨良多，常读常新。</p><p><strong>【法】圣埃克苏佩里</strong></p><blockquote><p>注：《小王子》的作者</p></blockquote><h3 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h3><blockquote><p>2013-11-16 20:45:01</p></blockquote><p>要是他们讲交情才服从您，您是在欺骗他们。您本人没有权利要人家作出牺牲。</p><blockquote><p>2013-11-16 20:45:11</p></blockquote><p>还有，要是他们跟您有了交情，以为某些苦活可以不干，您也是在欺骗他们，因为他们还是应该服从。<br><a id="more"></a> </p><h3 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h3><blockquote><p>2013-11-16 21:00:37</p></blockquote><p>我公正还是不公正？我不知道。我若有过必罚，故障就减少。该负责的不是人，而是一股隐秘的力量；如果不触动每个人，也永远触动不了这股力量。我若事事讲公正，夜航一次就会是一次送命的机会。</p><blockquote><p>2013-11-16 21:03:05</p></blockquote><p>我这样粗暴辞退的不是他，是错误，这错误可能他也负责不了，但是通过他发生的。</p><h3 id="第十三章"><a href="#第十三章" class="headerlink" title="第十三章"></a>第十三章</h3><blockquote><p>2013-11-16 21:27:11</p></blockquote><p>失败使强者更强。可惜，跟众人玩的游戏中，事物的真正意义是很少算分的。大家从表面现象评定输赢，计算那些可怜的分数。人往往受到表面失败的束缚。</p><blockquote><p>2013-11-16 21:28:52</p></blockquote><p>您不用以为，但是要执行</p><h3 id="第十四章"><a href="#第十四章" class="headerlink" title="第十四章"></a>第十四章</h3><blockquote><p>2013-11-16 21:37:24</p></blockquote><p>古代人的领袖对人的痛苦可能毫不顾惜，对人的死亡却无限怜悯。不是怜悯个人的夭亡，而是怜悯人类被沙海吞没。于是他领导人民，要石块凌空屹立，使沙漠无法掩埋。</p><h3 id="第十五章"><a href="#第十五章" class="headerlink" title="第十五章"></a>第十五章</h3><blockquote><p>2013-11-16 21:42:48</p></blockquote><p>他本来还是能够奋斗的，试试机会，因为外界的宿命论是没有的，但是确实有一种内心的宿命论：那是在人发现自己的脆弱的那一分钟发生的；这时你就晕头转向，被错误吸引过去。</p><h3 id="第十九章"><a href="#第十九章" class="headerlink" title="第十九章"></a>第十九章</h3><blockquote><p>2013-11-16 21:50:59</p></blockquote><p>您要知道生活中不存在解决办法。存在的是各种进取力量。必须创造这些力量，办法随后会来的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一早就读过，最近在多看导出的印象笔记中翻到，感慨良多，常读常新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;【法】圣埃克苏佩里&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：《小王子》的作者&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;第六章&quot;&gt;&lt;a href=&quot;#第六章&quot; class=&quot;headerlink&quot; title=&quot;第六章&quot;&gt;&lt;/a&gt;第六章&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;2013-11-16 20:45:01&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要是他们讲交情才服从您，您是在欺骗他们。您本人没有权利要人家作出牺牲。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2013-11-16 20:45:11&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;还有，要是他们跟您有了交情，以为某些苦活可以不干，您也是在欺骗他们，因为他们还是应该服从。&lt;br&gt;
    
    </summary>
    
    
      <category term="阅读 书摘 圣埃克苏佩里" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB-%E4%B9%A6%E6%91%98-%E5%9C%A3%E5%9F%83%E5%85%8B%E8%8B%8F%E4%BD%A9%E9%87%8C/"/>
    
  </entry>
  
  <entry>
    <title>初探NSProxy黑魔法</title>
    <link href="http://yoursite.com/2016/07/19/NSProxy-sample/"/>
    <id>http://yoursite.com/2016/07/19/NSProxy-sample/</id>
    <published>2016-07-18T16:00:00.000Z</published>
    <updated>2018-01-26T08:16:49.564Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>参考<br><a href="http://blog.csdn.net/onlyou930/article/details/7548476" target="_blank" rel="noopener">iOS使用NSProxy实现代理模式</a><br><a href="http://blog.csdn.net/onlyou930/article/details/7548634" target="_blank" rel="noopener">iOS使用NSProxy实现消息转发机制，模拟多重继承</a><br><a href="https://coldfunction.com/mgen/p/e" target="_blank" rel="noopener">封装NSInvocation用数组调用任意个数参数的performSelector</a></p></blockquote><p>先看官方说明</p><blockquote><p>NSProxy is an abstract superclass defining an API for objects that act as stand-ins for other objects or for objects that don’t exist yet. Typically, a message to a proxy is forwarded to the real object or causes the proxy to load (or transform itself into) the real object. Subclasses of NSProxy can be used to implement transparent distributed messaging (for example, NSDistantObject) or for lazy instantiation of objects that are expensive to create.</p></blockquote><p>NSProxy 是一个虚基类，它为一些表现的像是其它对象的替身或者并不存在的对象定义一套API。通常发送给代理的消息会被转发给一个真实的对象，或者促使代理本身加载(或者将本身转换成)一个真实的对象。NSProxy的子类可以用来实现消息的透明分布式转发，或者用于开销巨大的对象的懒加载（初始化）。<br><a id="more"></a> </p><p>NSProxy implements the basic methods required of a root class, including those defined in the NSObject protocol. However, as an abstract class it doesn’t provide an initialization method, and it raises an exception upon receiving any message it doesn’t respond to. A concrete subclass must therefore provide an initialization or creation method and override the forwardInvocation: and methodSignatureForSelector: methods to handle messages that it doesn’t implement itself. A subclass’s implementation of forwardInvocation: should do whatever is needed to process the invocation, such as forwarding the invocation over the network or loading the real object and passing it the invocation. methodSignatureForSelector: is required to provide argument type information for a given message; a subclass’s implementation should be able to determine the argument types for the messages it needs to forward and should construct an NSMethodSignature object accordingly. See the NSDistantObject, NSInvocation, and NSMethodSignature class specifications for more information.</p><p>NSProxy实现了包括NSObject协议在内基类所需的基础方法，但是作为一个虚拟的基类并没有提供初始化的方法。它接收到任何自己没有定义的方法他都会产生一个异常，所以一个实际的子类必须提供一个初始化方法或者创建方法，并且重载forwardInvocation:方法和methodSignatureForSelector:方法来处理自己没有实现的消息。一个子类的forwardInvocation:实现应该采取所有措施来处理invocation,比如转发网络消息，或者加载一个真实的对象，并把invocation转发给他。methodSignatureForSelector:需要为给定消息提供参数类型信息，子类的实现应该有能力决定他应该转发消息的参数类型，并构造相对应的NSMethodSignature对象。详细信息可以查看NSDistantObject, NSInvocation, and NSMethodSignature的类型说明。</p><p>在<a href="http://blog.csdn.net/onlyou930/article/details/7548634" target="_blank" rel="noopener">iOS使用NSProxy实现消息转发机制，模拟多重继承</a>中，可以看到苹果官方对NSProxy的示例代码，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@interface TargetProxy : NSProxy &#123;</span><br><span class="line">    id realObject1;</span><br><span class="line">    id realObject2;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (id)initWithTarget1:(id)t1 target2:(id)t2;</span><br><span class="line"> </span><br><span class="line">@end</span><br><span class="line"> </span><br><span class="line">int main(int argc, const char *argv[]) &#123;</span><br><span class="line">    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];</span><br><span class="line">    </span><br><span class="line">    // Create an empty mutable string, which will be one of the</span><br><span class="line">    // real objects for the proxy.</span><br><span class="line">    NSMutableString *string = [[NSMutableString alloc] init];</span><br><span class="line"> </span><br><span class="line">    // Create an empty mutable array, which will be the other</span><br><span class="line">    // real object for the proxy.</span><br><span class="line">    NSMutableArray *array = [[NSMutableArray alloc] init];</span><br><span class="line"> </span><br><span class="line">    // Create a proxy to wrap the real objects.  This is rather</span><br><span class="line">    // artificial for the purposes of this example -- you&apos;d rarely</span><br><span class="line">    // have a single proxy covering two objects.  But it is possible.</span><br><span class="line">    id proxy = [[TargetProxy alloc] initWithTarget1:string target2:array];</span><br><span class="line"> </span><br><span class="line">    // Note that we can&apos;t use appendFormat:, because vararg methods</span><br><span class="line">    // cannot be forwarded!</span><br><span class="line">    [proxy appendString:@&quot;This &quot;];</span><br><span class="line">    [proxy appendString:@&quot;is &quot;];</span><br><span class="line">    [proxy addObject:string];</span><br><span class="line">    [proxy appendString:@&quot;a &quot;];</span><br><span class="line">    [proxy appendString:@&quot;test!&quot;];</span><br><span class="line"> </span><br><span class="line">    NSLog(@&quot;count should be 1, it is: %d&quot;, [proxy count]);</span><br><span class="line">    </span><br><span class="line">    if ([[proxy objectAtIndex:0] isEqualToString:@&quot;This is a test!&quot;]) &#123;</span><br><span class="line">        NSLog(@&quot;Appending successful.&quot;, proxy);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        NSLog(@&quot;Appending failed, got: &apos;%@&apos;&quot;, proxy);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    NSLog(@&quot;Example finished without errors.&quot;);</span><br><span class="line">    [pool release];</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">@implementation TargetProxy</span><br><span class="line"> </span><br><span class="line">- (id)initWithTarget1:(id)t1 target2:(id)t2 &#123;</span><br><span class="line">    realObject1 = [t1 retain];</span><br><span class="line">    realObject2 = [t2 retain];</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (void)dealloc &#123;</span><br><span class="line">    [realObject1 release];</span><br><span class="line">    [realObject2 release];</span><br><span class="line">    [super dealloc];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// The compiler knows the types at the call site but unfortunately doesn&apos;t</span><br><span class="line">// leave them around for us to use, so we must poke around and find the types</span><br><span class="line">// so that the invocation can be initialized from the stack frame.</span><br><span class="line"> </span><br><span class="line">// Here, we ask the two real objects, realObject1 first, for their method</span><br><span class="line">// signatures, since we&apos;ll be forwarding the message to one or the other</span><br><span class="line">// of them in -forwardInvocation:.  If realObject1 returns a non-nil</span><br><span class="line">// method signature, we use that, so in effect it has priority.</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    NSMethodSignature *sig;</span><br><span class="line">    sig = [realObject1 methodSignatureForSelector:aSelector];</span><br><span class="line">    if (sig) return sig;</span><br><span class="line">    sig = [realObject2 methodSignatureForSelector:aSelector];</span><br><span class="line">    return sig;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// Invoke the invocation on whichever real object had a signature for it.</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)invocation &#123;</span><br><span class="line">    id target = [realObject1 methodSignatureForSelector:[invocation selector]] ? realObject1 : realObject2;</span><br><span class="line">    [invocation invokeWithTarget:target];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// Override some of NSProxy&apos;s implementations to forward them...</span><br><span class="line">- (BOOL)respondsToSelector:(SEL)aSelector &#123;</span><br><span class="line">    if ([realObject1 respondsToSelector:aSelector]) return YES;</span><br><span class="line">    if ([realObject2 respondsToSelector:aSelector]) return YES;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>不过是MRC的，我用ARC风格重写了一遍，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;参考&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/onlyou930/article/details/7548476&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS使用NSProxy实现代理模式&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/onlyou930/article/details/7548634&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;iOS使用NSProxy实现消息转发机制，模拟多重继承&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://coldfunction.com/mgen/p/e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;封装NSInvocation用数组调用任意个数参数的performSelector&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看官方说明&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NSProxy is an abstract superclass defining an API for objects that act as stand-ins for other objects or for objects that don’t exist yet. Typically, a message to a proxy is forwarded to the real object or causes the proxy to load (or transform itself into) the real object. Subclasses of NSProxy can be used to implement transparent distributed messaging (for example, NSDistantObject) or for lazy instantiation of objects that are expensive to create.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NSProxy 是一个虚基类，它为一些表现的像是其它对象的替身或者并不存在的对象定义一套API。通常发送给代理的消息会被转发给一个真实的对象，或者促使代理本身加载(或者将本身转换成)一个真实的对象。NSProxy的子类可以用来实现消息的透明分布式转发，或者用于开销巨大的对象的懒加载（初始化）。&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS 黑魔法 Objective-C" scheme="http://yoursite.com/tags/iOS-%E9%BB%91%E9%AD%94%E6%B3%95-Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>深圳的云  - 持续更新</title>
    <link href="http://yoursite.com/2016/07/13//sz-clouds/"/>
    <id>http://yoursite.com/2016/07/13//sz-clouds/</id>
    <published>2016-07-13T10:31:22.000Z</published>
    <updated>2018-01-26T08:14:20.662Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>随手拍云并记录</p></blockquote><h4 id="捉云见蝶"><a href="#捉云见蝶" class="headerlink" title="捉云见蝶"></a>捉云见蝶</h4><p><img src="http://oa1h8wuus.bkt.clouddn.com/6-20.JPG" alt=""><br><a id="more"></a> </p><h4 id="晚霞送我"><a href="#晚霞送我" class="headerlink" title="晚霞送我"></a>晚霞送我</h4><p><img src="http://oa1h8wuus.bkt.clouddn.com/6-24-1.jpg" alt=""><br><img src="http://oa1h8wuus.bkt.clouddn.com/6-24-2.jpg" alt=""></p><h4 id="日出"><a href="#日出" class="headerlink" title="日出"></a>日出</h4><p><img src="http://oa1h8wuus.bkt.clouddn.com/6-22.JPG" alt=""><br><img src="http://oa1h8wuus.bkt.clouddn.com/6-22-2.JPG" alt=""></p><h4 id="烈日灼心"><a href="#烈日灼心" class="headerlink" title="烈日灼心"></a>烈日灼心</h4><p><img src="http://oa1h8wuus.bkt.clouddn.com/7-1-3.JPG" alt=""></p><h4 id="自带drama滤镜"><a href="#自带drama滤镜" class="headerlink" title="自带drama滤镜"></a>自带drama滤镜</h4><p><img src="http://oa1h8wuus.bkt.clouddn.com/7-1.JPG" alt=""></p><h4 id="初尝Snapseed滋味"><a href="#初尝Snapseed滋味" class="headerlink" title="初尝Snapseed滋味"></a>初尝Snapseed滋味</h4><p><img src="http://oa1h8wuus.bkt.clouddn.com/6-10.JPG" alt=""></p><h4 id="泼墨涂鸦"><a href="#泼墨涂鸦" class="headerlink" title="泼墨涂鸦"></a>泼墨涂鸦</h4><p><img src="http://oa1h8wuus.bkt.clouddn.com/6-21.jpg" alt=""><br><img src="http://oa1h8wuus.bkt.clouddn.com/6-21-3.JPG" alt=""></p><h4 id="好时尚的跑车喂！"><a href="#好时尚的跑车喂！" class="headerlink" title="好时尚的跑车喂！"></a>好时尚的跑车喂！</h4><p><img src="http://oa1h8wuus.bkt.clouddn.com/6-22-3.JPG" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;随手拍云并记录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;捉云见蝶&quot;&gt;&lt;a href=&quot;#捉云见蝶&quot; class=&quot;headerlink&quot; title=&quot;捉云见蝶&quot;&gt;&lt;/a&gt;捉云见蝶&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://oa1h8wuus.bkt.clouddn.com/6-20.JPG&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="摄影 iPhone RX100" scheme="http://yoursite.com/tags/%E6%91%84%E5%BD%B1-iPhone-RX100/"/>
    
  </entry>
  
  <entry>
    <title>Jekyll on Rails原创翻译</title>
    <link href="http://yoursite.com/2016/06/17//Jekyll-on-Rails/"/>
    <id>http://yoursite.com/2016/06/17//Jekyll-on-Rails/</id>
    <published>2016-06-17T10:09:00.000Z</published>
    <updated>2018-01-26T08:14:51.843Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原文链接-https-www-sitepoint-com-jekyll-rails"><a href="#原文链接-https-www-sitepoint-com-jekyll-rails" class="headerlink" title="原文链接 https://www.sitepoint.com/jekyll-rails/"></a>原文链接 <a href="https://www.sitepoint.com/jekyll-rails/" target="_blank" rel="noopener">https://www.sitepoint.com/jekyll-rails/</a></h4><p>之前研究CI持续集成时，就发现ruby是一门低调（国内）而活跃的语言。打算搭自己的网站&amp;博客之后，在Node.JS，Ruby on Rails和 Github.io 之间徘徊了一下，选择了ruby，因为之前试过Github.io + Jekyll，便试了试搜索这两个关键词，没想到竟发现这样一篇通俗易懂，非常适合入门的教程，便试着翻译一下，希望对大家有所帮助。</p><hr><a id="more"></a> <p>感激 Ruby on Rails 让我们能够快速建立很棒的 web应用。我们也很欣赏 Jekyll 那将 Markdown 和模板变为漂亮的静态网站的能力。</p><p>要是我们结合两者会怎样呢？在这篇文章，我将实践这个想法。</p><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么?"></a>为什么?</h2><p>当你不想将你的主应用和你的博客分离，就是结合 Jekyll 和 Rails 的最佳实践场景。 如果你只想给你的网站加些动态特性，那就不应该这样做（<a href="https://middlemanapp.com" target="_blank" rel="noopener">Middleman</a>是个更好的选择）。但不管原因是什么，我们开始吧！</p><h2 id="Step-1-应用"><a href="#Step-1-应用" class="headerlink" title="Step 1: 应用"></a>Step 1: 应用</h2><p>很有可能，你已经有一个web应用了，你还想加一个博客。但为了一致性，还是让我们专门生成一个应用吧。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rails <span class="built_in">new</span> jekyll-<span class="keyword">on</span>-rails</span><br><span class="line">$ cd jekyll-<span class="keyword">on</span>-rails</span><br></pre></td></tr></table></figure><p>进入了这个应用之后，我们需要为 Jekyll 博客做配置。首先，我们要将 Jekyll 添加进这个应用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">'Gemfile'</span></span></span><br><span class="line">gem 'jekyll', '2.5.3'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Terminal</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bundle install</span></span><br></pre></td></tr></table></figure><p>一完成这条命令，我们就可以开始添加博客到 Jekyll。</p><h2 id="Step-2-博客"><a href="#Step-2-博客" class="headerlink" title="Step 2: 博客"></a>Step 2: 博客</h2><p>假想情况下， 一个模板文件和一个 Markdown 文件 就能让 Jekyll 运行起来。但我们的博客往往比那复杂。每个博客都（也应该）是不一样的，但我们需要一个用于展示的标准博客，所以就使用默认的（模板、内容）吧。</p><p>首先，让 Jekyll 生成博客。</p><pre><code>$ bundle exec jekyll new blog</code></pre><p>这就生成了一个简单博客例子，文件架构如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── _includes</span><br><span class="line">│   ├── <span class="selector-tag">footer</span>.html</span><br><span class="line">│   ├── head.html</span><br><span class="line">│   └── <span class="selector-tag">header</span>.html</span><br><span class="line">├── _layouts</span><br><span class="line">│   ├── default.html</span><br><span class="line">│   ├── page.html</span><br><span class="line">│   └── post.html</span><br><span class="line">├── _posts</span><br><span class="line">│   └── <span class="number">2015</span>-<span class="number">03</span>-<span class="number">27</span>-welcome-to-jekyll.markdown</span><br><span class="line">├── _sass</span><br><span class="line">│   ├── _base.scss</span><br><span class="line">│   ├── _layout.scss</span><br><span class="line">│   └── _syntax-highlighting.scss</span><br><span class="line">├── about.md</span><br><span class="line">├── css</span><br><span class="line">│   └── main.scss</span><br><span class="line">├── feed.xml</span><br><span class="line">└── index.html</span><br></pre></td></tr></table></figure><p>大部分文件就保持原样，但我们要把 <code>_config.yml</code>移到 Rails <code>config</code> 目录并把它重命名得更清晰具体一些 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv _config.yml ../config/jekyll.yml</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ..</span></span><br></pre></td></tr></table></figure><p>这才是真正好玩的地方，配置博客！</p><h2 id="Step-3-配置博客"><a href="#Step-3-配置博客" class="headerlink" title="Step 3: 配置博客"></a>Step 3: 配置博客</h2><p>如果你现在试着进入博客并执行 <code>jekyll serve</code>，它也能运行，但你会得到一个没有配置文件的报错。很明显是因为我们刚刚移动了它，所以我们在生成博客的时候还得用特别配置。</p><p>我们希望 Jekyll 站点在每次 Rails 应用重新生成的时候都建立一遍，所以需要添加一个initializer（初始化）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#config/initializers/blog.rb</span></span><br><span class="line"></span><br><span class="line">Rails.application.config.after_initialize <span class="keyword">do</span></span><br><span class="line">  Rails.logger = Logger.<span class="keyword">new</span>(STDOUT)</span><br><span class="line">  begin</span><br><span class="line">    <span class="comment"># make a spot for the site</span></span><br><span class="line">    dest = Rails.root.join(<span class="string">'public/blog'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># generate the site</span></span><br><span class="line">    Jekyll::Site.<span class="keyword">new</span>(</span><br><span class="line">      Jekyll.configuration(&#123;</span><br><span class="line">        <span class="string">"config"</span> =&gt; Rails.root.join(<span class="string">'config'</span>, <span class="string">'jekyll.yml'</span>).to_s,</span><br><span class="line">        <span class="string">"source"</span> =&gt; Rails.root.join(<span class="string">'blog'</span>).to_s,</span><br><span class="line">        <span class="string">"destination"</span> =&gt; dest.to_s</span><br><span class="line">      &#125;)</span><br><span class="line">    ).process</span><br><span class="line"></span><br><span class="line">                <span class="comment"># the strange codes give the output color</span></span><br><span class="line">    Rails.logger.info <span class="string">"\e[0;32;49mJekyll site built!\e[0m]]"</span></span><br><span class="line">  rescue =&gt; e</span><br><span class="line">    Rails.logger.error <span class="string">"\e[0;31;49mJekyll site build failed.\e[0m\n\e[0;33;49mError:\e[0m #&#123;e&#125;"</span></span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这些代码做了以下这些事情：</p><ul><li>在 Rails 应用启动时生成 Jekyll 站点</li><li>为这个站点定义一个路径 (<code>http://localhost:3000/blog/</code>) – 想要改变站点，修改<code>dest</code>变量</li><li>使用智能的错误处理，通知我们站点的建立成功或者失败。这也能保证，即使站点建立失败，应用也不会崩溃，使得 Jekyll 和 Rails 的bug不会相互影响。</li></ul><p>这个文件告诉 Jekyll 将我们的站点 (<code>blog/</code> 里的) 移动到 (<code>public/blog/</code>)。因为 Rails 在 <code>public/</code> 目录存放静态文件。</p><p>现在我们终于可以启动 Rails 应用，看它运行得怎么样。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ bundle exec rails server</span><br><span class="line">=&gt; Booting WEBrick</span><br><span class="line">=&gt; Rails <span class="number">4.2</span>.<span class="number">0</span> application starting in development on ht<span class="symbol">tp:</span>//localho<span class="symbol">st:3000</span></span><br><span class="line">=&gt; Run `rails server -h` for more startup options</span><br><span class="line">=&gt; Ctrl-C to shutdown server</span><br><span class="line">Configuration fi<span class="symbol">le:</span> /Users/jesseherrick/Dropbox/Drafts/jekyll-on-rails/config/jekyll.yml</span><br><span class="line">I, [<span class="number">2015</span>-<span class="number">03</span>-<span class="number">27</span><span class="symbol">T16:08</span>:<span class="number">02.591221</span> #<span class="number">56341</span>]  <span class="built_in">INFO</span> -- <span class="symbol">:</span> Jekyll site built!</span><br><span class="line">[<span class="number">2015</span>-<span class="number">03</span>-<span class="number">27</span> <span class="symbol">16:08</span><span class="symbol">:02</span>] <span class="built_in">INFO</span>  WEBrick <span class="number">1.3</span>.<span class="number">1</span></span><br><span class="line">[<span class="number">2015</span>-<span class="number">03</span>-<span class="number">27</span> <span class="symbol">16:08</span><span class="symbol">:02</span>] <span class="built_in">INFO</span>  ruby <span class="number">2.2</span>.<span class="number">0</span> (<span class="number">2014</span>-<span class="number">12</span>-<span class="number">25</span>) [x86_64-darwin14]</span><br><span class="line">[<span class="number">2015</span>-<span class="number">03</span>-<span class="number">27</span> <span class="symbol">16:08</span><span class="symbol">:02</span>] <span class="built_in">INFO</span>  WEBri<span class="symbol">ck:</span><span class="symbol">:HT</span>TPServer#sta<span class="symbol">rt:</span> pid=<span class="number">56341</span> port=<span class="number">3000</span></span><br></pre></td></tr></table></figure><p>问题出现了，CSS 加载不正确！</p><p><img src="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/04/1428750722eHDhYI5.png" alt="a"></p><p>稍微研究一下，你会发现 HTML 用的绝对路径（即<code>/css/main.css</code>）。这意味着任何资源请求都会返回404，因为我们的博客在子目录下。幸好， Jekyll网站模板足够聪明，在配置里有<code>baseurl</code>选项，使得我们可以定义一个子目录来加载资源。为了快速解决问题，修改配置如下：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ... other config not shown ...</span><br><span class="line">baseurl: <span class="string">"/blog"</span></span><br><span class="line"># ... other config not shown ...</span><br></pre></td></tr></table></figure><p>这里使用 <code>/blog</code> 是因为站点在这个目录生成。重启服务器之后，一切就顺利运行了。</p><p><img src="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/04/1428750746UAUjKG9.png" alt="b"></p><p>好了，Rails 应用和 Jekyll 站点可以无缝协作了。你现在可以停止阅读了，不过后面还有些更酷的内容。</p><h2 id="更多-使用-Rails-like-资源"><a href="#更多-使用-Rails-like-资源" class="headerlink" title="更多: 使用 Rails-like 资源"></a>更多: 使用 Rails-like 资源</h2><p>可惜的是，目前还没有简便的办法将 Rails 资源链入 Jekyll。但如果你还是很喜欢 Rails asset pipeline （拜托，谁不喜欢啊），<a href="https://github.com/jekyll-assets/jekyll-assets" target="_blank" rel="noopener">这儿有个插件！</a></p><p>Jekyll-Assets 是个很赞的 Jekyll 插件，它能做的事情很多，比如：</p><ul><li>编译 CoffeeScript, SCSS/Sass, Less, 和 ERB</li><li>从内部资源请求依赖 (使用 Sprockets)</li><li>缓存硬清除和软清除 (main-bbd8a1c8b716f90cfaf9493cbb3868dc.css vs main.css?cb=bbd8a1c8b716f90cfaf9493cbb3868dc)</li><li>压缩你的资源</li><li>以及一些其他的事情</li></ul><p>很棒吧？把它加入 Jekyll 站点吧</p><p> 首先， 我们添加 <code>gem &#39;jekyll-assets&#39;</code> 到 <code>Gemfile</code> 然后 <code>bundle install</code>。 接着， 确保 Jekyll 在生成站点的时候引用了这个插件。 添加 <code>jekyll-assets</code> 到 <code>config/jekyll.yml</code> 里的插件列表, 如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">'config/jekyll.yml`</span></span></span><br><span class="line">plugins:</span><br><span class="line">  - jekyll-assets</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ... other config ...</span></span><br></pre></td></tr></table></figure><p>加入以后，插件就可以开始用了。 但首先，我们要确认那些我们需要的特性。 所以再次打开 <code>config/jekyll.yml</code>并输入：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 'config/jekyll.yml'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># assets</span></span><br><span class="line"><span class="attr"> assets:</span></span><br><span class="line"><span class="attr">    dirname:</span> <span class="string">assets</span> <span class="comment"># _assets</span></span><br><span class="line"><span class="attr">    baseurl:</span> <span class="string">/blog/assets/</span></span><br><span class="line"><span class="attr">    sources:</span> <span class="comment"># asset subdirectories</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">_assets/stylesheets</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">_assets/javascripts</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">_assets/images</span></span><br><span class="line"><span class="attr">    cachebust:</span> <span class="string">hard</span></span><br><span class="line"><span class="attr">    js_compressor:</span> <span class="string">uglifier</span> <span class="comment"># included by rails</span></span><br><span class="line"><span class="attr">    css_compressor:</span> <span class="string">sass</span> <span class="comment"># included by rails</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... other config ...</span></span><br></pre></td></tr></table></figure><p>非常好，但现在我们要真正地使用这个插件，就要移动一下我们的资源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> make a place <span class="keyword">for</span> the assets</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir _assets</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir _assets/stylesheets</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir _assets/javascripts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir _assets/images</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> move around assets</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv _sass/* _assets/stylesheets/ &amp;&amp; rmdir _sass</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv css/* _assets/stylesheets/ &amp;&amp; rmdir css</span></span><br></pre></td></tr></table></figure><p>如果我们碰巧有 <code>JavaScript/CoffeeScript</code> 文件或图片，应该把它们移动到相应文件夹中。</p><p>正如在 Rails 中, Jekyll-Assets 使用两个（有时三个）文件扩展来转换文件。为了达到目的，要重命名 <code>main.scss</code> 为 <code>main.css.scss</code> 因为我们希望文件被解析为 SCSS, 再转为 CSS. 你应该把每个想转换的 Jekyll-Assets 都这样处理(例如 <code>main.js.coffee</code>).</p><p>再看看我们的博客，你可能会发现一个问题，样式表又开始 404了。 为了修复，我们要用 Jekyll-Assets 的方式把样式表 (和脚本) 链入 HTML。</p><p>Jekyll-Assets 提供好些 liquid 标签和生成器来进行缓存清除和资源路径管理。这里我们不会覆盖全部，所以好奇的话<a href="https://github.com/jekyll-assets/jekyll-assets#how-to-use-jekyll-assets" target="_blank" rel="noopener">看这个页面</a></p><p>为了链接样式表，我们只需把这个加入 HTML :</p>    <!-- 'blog/_includes/head.html' -->    {% stylesheet main %}<p>现在我们可以删除那些只会报404的标签了。而且一旦重启应用，你会看到样式表又重新加载了。</p><p>为什么我们要费尽心思来得到同一个结果？</p><p>尽管看上去多余，我们实际上为自己设置了一个非常好用的系统。加点 CoffeeScript 来展示吧。</p><p>比如说我想添加 <code>FitText.js</code> 到 Jekyll 站点，用 JavaScript 把标题变为漂亮的响应式。 问题是这个脚本依赖 jQuery来运行，出于性能考虑，我不想在 HTML 调用太多脚本。Jekyll-Assets 就让事情变得灰常简单。</p><p>首先打开 Jekyll config 添加一个子目录到 JavaScript assets 文件夹：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 'config/jekyll.yml'</span></span><br><span class="line"></span><br><span class="line">assets:</span><br><span class="line">  # <span class="built_in">..</span>. other<span class="built_in"> config </span><span class="keyword">not</span> shown <span class="built_in">..</span>.</span><br><span class="line">        sources:</span><br><span class="line">          - _assets/stylesheets</span><br><span class="line">          - _assets/javascripts</span><br><span class="line">          - _assets/javascripts/vendor # added</span><br><span class="line">          - _assets/images</span><br><span class="line">        # <span class="built_in">..</span>. other<span class="built_in"> config </span><span class="keyword">not</span> shown <span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p>然后创建 vendor 目录 把 jQuery 和 FitText.js 下载进去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> create the directory</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog/_assets/javascripts</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir vendor</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> vendor</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> download the assets</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://raw.githubusercontent.com/davatron5000/FitText.js/master/jquery.fittext.js -O fittext.js</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget http://code.jquery.com/jquery-2.1.3.min.js -O jquery.js</span></span><br></pre></td></tr></table></figure><p>联合这些文件，这样就不会多次请求 javascript：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 'blog/_assets/javascripts/main.js.coffee</span></span><br><span class="line"><span class="meta">#= require vendor/jquery</span></span><br><span class="line"><span class="meta">#= require vendor/fittext</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># and then actually use the plugin</span></span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">    $(<span class="string">'h1.page-heading'</span>).fitText()</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><p>最后，在 HTML 中请求这个脚本：<br>    <!-- bottom of '_layout/default.html' -->    {% javascript main %}</p><p>现在重载这个页面，就有一个大大的响应式头部：</p><p><img src="https://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2015/04/1428750800Gn65DkE.png" alt="c"></p><p>用 Jekyll-Assets 能做的事有很多，这只是个开始 。</p><p>Jekyll 有个制作各种很赞插件的论坛， 你要是想做自己的插件， Jekyll 也有相应的文档。</p><h2 id="更多-自动化"><a href="#更多-自动化" class="headerlink" title="更多: 自动化"></a>更多: 自动化</h2><p>你可能注意到了每次我们想改进站点，就得重启 Rails。 如果只是修改 Jekyll 站点那还好，但如果是在做网页设计，那可真够烦的。幸运的是这个过程可以自动化。<br>首先，为 Rails 创建一个新的 Rake 任务 。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ rails generate task jekyll</span><br><span class="line">This <span class="keyword">command</span> creates <span class="keyword">a</span> <span class="keyword">file</span> called lib/tasks/jekyll.rake. Using Jekyll’s API, we can programmatically build the site <span class="built_in">and</span> serve it at the same time (using threads).</span><br><span class="line"></span><br><span class="line">namespace :jekyll <span class="keyword">do</span></span><br><span class="line">  dest = Rails.root.<span class="keyword">join</span>(<span class="string">'public/blog'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">options</span> = &#123;</span><br><span class="line">    <span class="string">'baseurl'</span> =&gt; <span class="string">'/blog'</span>,</span><br><span class="line">    <span class="string">'config'</span> =&gt; Rails.root.<span class="keyword">join</span>(<span class="string">'config'</span>, <span class="string">'jekyll.yml'</span>).to_s,</span><br><span class="line">    <span class="string">'watch'</span> =&gt; true,</span><br><span class="line">    <span class="string">'port'</span> =&gt; <span class="number">3000</span>,</span><br><span class="line">    <span class="string">'source'</span> =&gt; Rails.root.<span class="keyword">join</span>(<span class="string">'blog'</span>).to_s,</span><br><span class="line">    <span class="string">'destination'</span> =&gt; dest.to_s</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build = Thread.<span class="keyword">new</span> &#123; Jekyl<span class="variable">l:</span>:Command<span class="variable">s:</span>:Build.process(<span class="keyword">options</span>) &#125;</span><br><span class="line">  serve = Thread.<span class="keyword">new</span> &#123; Jekyl<span class="variable">l:</span>:Command<span class="variable">s:</span>:Serve.process(<span class="keyword">options</span>) &#125;</span><br><span class="line"></span><br><span class="line">  commands = [build, serve]</span><br><span class="line">  commands.each &#123; |<span class="keyword">c</span>| <span class="keyword">c</span>.<span class="keyword">join</span> &#125;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>现在 <code>rake jekyll</code>，这能在 <code>http://localhost:3000/blog/</code>启动服务器 并在检测到文件修改时就重启。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> Jekyll 和 Rails 之间的可能性是无限的。 这看似对立的一对儿可以为一个精彩而全面的网站齐心协力。 你可以在 <a href="https://github.com/JesseHerrick/jekyll-on-rails" target="_blank" rel="noopener">GitHub</a>上查看此项目. 如果你有任何疑问，或者关于如何改进的建议，希望能在下面听到你的声音。</p><h3 id="作者-Jesse-Herrick"><a href="#作者-Jesse-Herrick" class="headerlink" title="作者 Jesse Herrick"></a>作者 <a href="https://jesse.codes" target="_blank" rel="noopener">Jesse Herrick</a></h3><h4 id="2015-04-13"><a href="#2015-04-13" class="headerlink" title="2015-04-13"></a>2015-04-13</h4><hr><p>全文渣翻，多谢体谅，本篇英文非常适合原文阅读，这也是我挑它练手的原因，希望以后能带来更有水平的翻译！</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原文链接-https-www-sitepoint-com-jekyll-rails&quot;&gt;&lt;a href=&quot;#原文链接-https-www-sitepoint-com-jekyll-rails&quot; class=&quot;headerlink&quot; title=&quot;原文链接 https://www.sitepoint.com/jekyll-rails/&quot;&gt;&lt;/a&gt;原文链接 &lt;a href=&quot;https://www.sitepoint.com/jekyll-rails/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.sitepoint.com/jekyll-rails/&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;之前研究CI持续集成时，就发现ruby是一门低调（国内）而活跃的语言。打算搭自己的网站&amp;amp;博客之后，在Node.JS，Ruby on Rails和 Github.io 之间徘徊了一下，选择了ruby，因为之前试过Github.io + Jekyll，便试了试搜索这两个关键词，没想到竟发现这样一篇通俗易懂，非常适合入门的教程，便试着翻译一下，希望对大家有所帮助。&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="Jekyll Rails" scheme="http://yoursite.com/tags/Jekyll-Rails/"/>
    
  </entry>
  
  <entry>
    <title>iOS技术博客收录 - 持续更新</title>
    <link href="http://yoursite.com/2016/06/07//iOS-developers/"/>
    <id>http://yoursite.com/2016/06/07//iOS-developers/</id>
    <published>2016-06-06T22:23:00.000Z</published>
    <updated>2018-01-26T09:24:09.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h2><p><a href="http://www.dullgrass.com" target="_blank" rel="noopener">dullgrass.com</a>    Wu Cuiping (dullgrass)   乐视网   PNChart主要贡献者之一</p><p><a href="http://limboy.me" target="_blank" rel="noopener">limboy.me/</a>     李忠  蘑菇街  </p><p><a href="http://blog.cnbluebox.com" target="_blank" rel="noopener">blog.cnbluebox.com</a><br>       刘坤   阿里</p><p><a href="http://casatwy.com" target="_blank" rel="noopener">casatwy.com</a>  田伟宇 阿里<br><a id="more"></a><br><a href="http://blog.csdn.net/lihei12345" target="_blank" rel="noopener">blog.csdn.net/lihei12345</a>  李富强  美团</p><p><a href="http://blog.sunnyxx.com" target="_blank" rel="noopener">blog.sunnyxx.com</a>   阳神   百度   招聘一个靠谱的 iOS  作者</p><p><a href="http://drops.wooyun.org/author/蒸米" target="_blank" rel="noopener">drops.wooyun.org/author/蒸米</a>  蒸米  安全</p><p><a href="https://www.mgenware.com/blog/" target="_blank" rel="noopener">www.mgenware.com/blog/</a>  mgenware</p><h2 id="代表作"><a href="#代表作" class="headerlink" title="代表作"></a>代表作</h2><p><a href="http://blog.cnbang.net" target="_blank" rel="noopener">blog.cnbang.net</a>   JSPatch 作者</p><p><a href="http://everettjf.github.io" target="_blank" rel="noopener">everettjf.github.io</a>     fastlane集成教程</p><p><a href="http://answerhuang.duapp.com" target="_blank" rel="noopener">answerhuang.duapp.com</a>   dSYM 分析工具作者</p><p><a href="http://blog.wtlucky.com" target="_blank" rel="noopener">blog.wtlucky.com</a>   FDStackView （向下兼容UIStackView） 作者之一 </p><p><a href="http://blog.ibireme.com" target="_blank" rel="noopener">blog.ibireme.com</a> YYKit作者</p><p><a href="http://www.huangyibiao.com" target="_blank" rel="noopener">www.henishuo.com</a>    黄仪标  标哥</p><ul><li><a href="http:///www.huangyibiao.com/ios-app-fully-code/" target="_blank" rel="noopener">iOS完整App资源收集</a></li><li><a href="http://www.huangyibiao.com/ios-interview-entrance/" target="_blank" rel="noopener">iOS面试宝典</a></li></ul><p><a href="http://yulingtianxia.com" target="_blank" rel="noopener">yulingtianxia.com</a>   杨萧玉</p><ul><li><p><a href="http://yulingtianxia.com/blog/2016/06/15/Objective-C-Message-Sending-and-Forwarding/" target="_blank" rel="noopener">Objective-C 消息发送与转发机制原理</a></p></li><li><p><a href="http://yulingtianxia.com/blog/2015/11/13/Summary-of-the-first-month-in-the-internship-of-Tencent/" target="_blank" rel="noopener">腾讯实习第一个月工作总</a>    （看到内容的时候整个人都惊呆了）</p></li></ul><h2 id="非个人"><a href="#非个人" class="headerlink" title="非个人"></a>非个人</h2><p><a href="http://bbs.iosre.com" target="_blank" rel="noopener">bbs.iosre.com</a>  iOS逆向论坛</p><p><a href="http://http://objccn.io/" target="_blank" rel="noopener">http://objccn.io</a>  objc中国</p><h2 id="不明觉厉"><a href="#不明觉厉" class="headerlink" title="不明觉厉"></a>不明觉厉</h2><p><a href="http://yansu.org/index.html" target="_blank" rel="noopener">yansu.org/index.html</a></p><p><a href="http://www.coderyi.com" target="_blank" rel="noopener">www.coderyi.com</a></p><p><a href="http://blog.csdn.net/v_july_v" target="_blank" rel="noopener">blog.csdn.net/v_july_v</a>   结构、算法</p><h2 id="终极"><a href="#终极" class="headerlink" title="终极"></a>终极</h2><p><a href="http://iosblog.cc" target="_blank" rel="noopener">iosblog.cc</a>   番茄阅读（iOS） - 收录其他博客的博客</p><p><a href="http://ios.jobbole.com/83907" target="_blank" rel="noopener">ios.jobbole.com/83907</a>   iOS 资源大全</p><p><a href="http://www.zybuluo.com/chenbinghua/note/172573" target="_blank" rel="noopener">www.zybuluo.com/chenbinghua/note/172573</a>    iOS博客与网站</p><p><a href="http://my.oschina.net/ios122/blog/516085" target="_blank" rel="noopener">my.oschina.net/ios122/blog/516085</a>    盘点国内程序员不常用的热门iOS第三方</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;个人&quot;&gt;&lt;a href=&quot;#个人&quot; class=&quot;headerlink&quot; title=&quot;个人&quot;&gt;&lt;/a&gt;个人&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.dullgrass.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dullgrass.com&lt;/a&gt;    Wu Cuiping (dullgrass)   乐视网   PNChart主要贡献者之一&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://limboy.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;limboy.me/&lt;/a&gt;     李忠  蘑菇街  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.cnbluebox.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;blog.cnbluebox.com&lt;/a&gt;&lt;br&gt;       刘坤   阿里&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://casatwy.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;casatwy.com&lt;/a&gt;  田伟宇 阿里&lt;br&gt;
    
    </summary>
    
      <category term="sticky" scheme="http://yoursite.com/categories/sticky/"/>
    
    
      <category term="iOS 集锦" scheme="http://yoursite.com/tags/iOS-%E9%9B%86%E9%94%A6/"/>
    
  </entry>
  
</feed>
